
RF_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00802000  00802000  000004c8  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001946  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005d3  00000000  00000000  00001f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000118d  00000000  00000000  00002539  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002f4  00000000  00000000  000036c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00019fbe  00000000  00000000  000039bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000a12  00000000  00000000  0001d97a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  0001e38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000072ed  00000000  00000000  0001e474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	0b c1       	rjmp	.+534    	; 0x21c <__bad_interrupt>
   6:	00 00       	nop
   8:	e0 c1       	rjmp	.+960    	; 0x3ca <__vector_2>
   a:	00 00       	nop
   c:	07 c1       	rjmp	.+526    	; 0x21c <__bad_interrupt>
   e:	00 00       	nop
  10:	05 c1       	rjmp	.+522    	; 0x21c <__bad_interrupt>
  12:	00 00       	nop
  14:	03 c1       	rjmp	.+518    	; 0x21c <__bad_interrupt>
  16:	00 00       	nop
  18:	01 c1       	rjmp	.+514    	; 0x21c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ff c0       	rjmp	.+510    	; 0x21c <__bad_interrupt>
  1e:	00 00       	nop
  20:	fd c0       	rjmp	.+506    	; 0x21c <__bad_interrupt>
  22:	00 00       	nop
  24:	fb c0       	rjmp	.+502    	; 0x21c <__bad_interrupt>
  26:	00 00       	nop
  28:	f9 c0       	rjmp	.+498    	; 0x21c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f7 c0       	rjmp	.+494    	; 0x21c <__bad_interrupt>
  2e:	00 00       	nop
  30:	f5 c0       	rjmp	.+490    	; 0x21c <__bad_interrupt>
  32:	00 00       	nop
  34:	f3 c0       	rjmp	.+486    	; 0x21c <__bad_interrupt>
  36:	00 00       	nop
  38:	f1 c0       	rjmp	.+482    	; 0x21c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ef c0       	rjmp	.+478    	; 0x21c <__bad_interrupt>
  3e:	00 00       	nop
  40:	ed c0       	rjmp	.+474    	; 0x21c <__bad_interrupt>
  42:	00 00       	nop
  44:	eb c0       	rjmp	.+470    	; 0x21c <__bad_interrupt>
  46:	00 00       	nop
  48:	e9 c0       	rjmp	.+466    	; 0x21c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e7 c0       	rjmp	.+462    	; 0x21c <__bad_interrupt>
  4e:	00 00       	nop
  50:	e5 c0       	rjmp	.+458    	; 0x21c <__bad_interrupt>
  52:	00 00       	nop
  54:	e3 c0       	rjmp	.+454    	; 0x21c <__bad_interrupt>
  56:	00 00       	nop
  58:	e1 c0       	rjmp	.+450    	; 0x21c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	df c0       	rjmp	.+446    	; 0x21c <__bad_interrupt>
  5e:	00 00       	nop
  60:	dd c0       	rjmp	.+442    	; 0x21c <__bad_interrupt>
  62:	00 00       	nop
  64:	db c0       	rjmp	.+438    	; 0x21c <__bad_interrupt>
  66:	00 00       	nop
  68:	d9 c0       	rjmp	.+434    	; 0x21c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d7 c0       	rjmp	.+430    	; 0x21c <__bad_interrupt>
  6e:	00 00       	nop
  70:	d5 c0       	rjmp	.+426    	; 0x21c <__bad_interrupt>
  72:	00 00       	nop
  74:	d3 c0       	rjmp	.+422    	; 0x21c <__bad_interrupt>
  76:	00 00       	nop
  78:	d1 c0       	rjmp	.+418    	; 0x21c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	cf c0       	rjmp	.+414    	; 0x21c <__bad_interrupt>
  7e:	00 00       	nop
  80:	cd c0       	rjmp	.+410    	; 0x21c <__bad_interrupt>
  82:	00 00       	nop
  84:	cb c0       	rjmp	.+406    	; 0x21c <__bad_interrupt>
  86:	00 00       	nop
  88:	c9 c0       	rjmp	.+402    	; 0x21c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c7 c0       	rjmp	.+398    	; 0x21c <__bad_interrupt>
  8e:	00 00       	nop
  90:	c5 c0       	rjmp	.+394    	; 0x21c <__bad_interrupt>
  92:	00 00       	nop
  94:	c3 c0       	rjmp	.+390    	; 0x21c <__bad_interrupt>
  96:	00 00       	nop
  98:	c1 c0       	rjmp	.+386    	; 0x21c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	bf c0       	rjmp	.+382    	; 0x21c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	bd c0       	rjmp	.+378    	; 0x21c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	bb c0       	rjmp	.+374    	; 0x21c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b9 c0       	rjmp	.+370    	; 0x21c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b7 c0       	rjmp	.+366    	; 0x21c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b5 c0       	rjmp	.+362    	; 0x21c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b3 c0       	rjmp	.+358    	; 0x21c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b1 c0       	rjmp	.+354    	; 0x21c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	af c0       	rjmp	.+350    	; 0x21c <__bad_interrupt>
  be:	00 00       	nop
  c0:	ad c0       	rjmp	.+346    	; 0x21c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ab c0       	rjmp	.+342    	; 0x21c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a9 c0       	rjmp	.+338    	; 0x21c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a7 c0       	rjmp	.+334    	; 0x21c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a5 c0       	rjmp	.+330    	; 0x21c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a3 c0       	rjmp	.+326    	; 0x21c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a1 c0       	rjmp	.+322    	; 0x21c <__bad_interrupt>
  da:	00 00       	nop
  dc:	9f c0       	rjmp	.+318    	; 0x21c <__bad_interrupt>
  de:	00 00       	nop
  e0:	9d c0       	rjmp	.+314    	; 0x21c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	9b c0       	rjmp	.+310    	; 0x21c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	99 c0       	rjmp	.+306    	; 0x21c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	97 c0       	rjmp	.+302    	; 0x21c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	95 c0       	rjmp	.+298    	; 0x21c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	93 c0       	rjmp	.+294    	; 0x21c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	91 c0       	rjmp	.+290    	; 0x21c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	8f c0       	rjmp	.+286    	; 0x21c <__bad_interrupt>
  fe:	00 00       	nop
 100:	8d c0       	rjmp	.+282    	; 0x21c <__bad_interrupt>
 102:	00 00       	nop
 104:	8b c0       	rjmp	.+278    	; 0x21c <__bad_interrupt>
 106:	00 00       	nop
 108:	89 c0       	rjmp	.+274    	; 0x21c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	87 c0       	rjmp	.+270    	; 0x21c <__bad_interrupt>
 10e:	00 00       	nop
 110:	85 c0       	rjmp	.+266    	; 0x21c <__bad_interrupt>
 112:	00 00       	nop
 114:	83 c0       	rjmp	.+262    	; 0x21c <__bad_interrupt>
 116:	00 00       	nop
 118:	81 c0       	rjmp	.+258    	; 0x21c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	7f c0       	rjmp	.+254    	; 0x21c <__bad_interrupt>
 11e:	00 00       	nop
 120:	7d c0       	rjmp	.+250    	; 0x21c <__bad_interrupt>
 122:	00 00       	nop
 124:	7b c0       	rjmp	.+246    	; 0x21c <__bad_interrupt>
 126:	00 00       	nop
 128:	79 c0       	rjmp	.+242    	; 0x21c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	77 c0       	rjmp	.+238    	; 0x21c <__bad_interrupt>
 12e:	00 00       	nop
 130:	75 c0       	rjmp	.+234    	; 0x21c <__bad_interrupt>
 132:	00 00       	nop
 134:	73 c0       	rjmp	.+230    	; 0x21c <__bad_interrupt>
 136:	00 00       	nop
 138:	71 c0       	rjmp	.+226    	; 0x21c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	6f c0       	rjmp	.+222    	; 0x21c <__bad_interrupt>
 13e:	00 00       	nop
 140:	6d c0       	rjmp	.+218    	; 0x21c <__bad_interrupt>
 142:	00 00       	nop
 144:	6b c0       	rjmp	.+214    	; 0x21c <__bad_interrupt>
 146:	00 00       	nop
 148:	69 c0       	rjmp	.+210    	; 0x21c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	67 c0       	rjmp	.+206    	; 0x21c <__bad_interrupt>
 14e:	00 00       	nop
 150:	65 c0       	rjmp	.+202    	; 0x21c <__bad_interrupt>
 152:	00 00       	nop
 154:	63 c0       	rjmp	.+198    	; 0x21c <__bad_interrupt>
 156:	00 00       	nop
 158:	61 c0       	rjmp	.+194    	; 0x21c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	5f c0       	rjmp	.+190    	; 0x21c <__bad_interrupt>
 15e:	00 00       	nop
 160:	5d c0       	rjmp	.+186    	; 0x21c <__bad_interrupt>
 162:	00 00       	nop
 164:	5b c0       	rjmp	.+182    	; 0x21c <__bad_interrupt>
 166:	00 00       	nop
 168:	59 c0       	rjmp	.+178    	; 0x21c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	57 c0       	rjmp	.+174    	; 0x21c <__bad_interrupt>
 16e:	00 00       	nop
 170:	55 c0       	rjmp	.+170    	; 0x21c <__bad_interrupt>
 172:	00 00       	nop
 174:	53 c0       	rjmp	.+166    	; 0x21c <__bad_interrupt>
 176:	00 00       	nop
 178:	51 c0       	rjmp	.+162    	; 0x21c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	4f c0       	rjmp	.+158    	; 0x21c <__bad_interrupt>
 17e:	00 00       	nop
 180:	4d c0       	rjmp	.+154    	; 0x21c <__bad_interrupt>
 182:	00 00       	nop
 184:	4b c0       	rjmp	.+150    	; 0x21c <__bad_interrupt>
 186:	00 00       	nop
 188:	49 c0       	rjmp	.+146    	; 0x21c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	47 c0       	rjmp	.+142    	; 0x21c <__bad_interrupt>
 18e:	00 00       	nop
 190:	45 c0       	rjmp	.+138    	; 0x21c <__bad_interrupt>
 192:	00 00       	nop
 194:	43 c0       	rjmp	.+134    	; 0x21c <__bad_interrupt>
 196:	00 00       	nop
 198:	41 c0       	rjmp	.+130    	; 0x21c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	3f c0       	rjmp	.+126    	; 0x21c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	3d c0       	rjmp	.+122    	; 0x21c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	3b c0       	rjmp	.+118    	; 0x21c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	39 c0       	rjmp	.+114    	; 0x21c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	37 c0       	rjmp	.+110    	; 0x21c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	35 c0       	rjmp	.+106    	; 0x21c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	33 c0       	rjmp	.+102    	; 0x21c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	31 c0       	rjmp	.+98     	; 0x21c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	2f c0       	rjmp	.+94     	; 0x21c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	2d c0       	rjmp	.+90     	; 0x21c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	2b c0       	rjmp	.+86     	; 0x21c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	29 c0       	rjmp	.+82     	; 0x21c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	27 c0       	rjmp	.+78     	; 0x21c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	25 c0       	rjmp	.+74     	; 0x21c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	23 c0       	rjmp	.+70     	; 0x21c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	21 c0       	rjmp	.+66     	; 0x21c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	1f c0       	rjmp	.+62     	; 0x21c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	1d c0       	rjmp	.+58     	; 0x21c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	1b c0       	rjmp	.+54     	; 0x21c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	19 c0       	rjmp	.+50     	; 0x21c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	17 c0       	rjmp	.+46     	; 0x21c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	15 c0       	rjmp	.+42     	; 0x21c <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	13 c0       	rjmp	.+38     	; 0x21c <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a8 30       	cpi	r26, 0x08	; 8
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	03 d1       	rcall	.+518    	; 0x420 <main>
 21a:	1a c1       	rjmp	.+564    	; 0x450 <_exit>

0000021c <__bad_interrupt>:
 21c:	f1 ce       	rjmp	.-542    	; 0x0 <__vectors>

0000021e <led_init>:

#define LED_PORT PORTD
#define LED_bm	(1<<4)

void led_init(void){
	PORT_SetPinsAsOutput( &LED_PORT,LED_bm);
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	e0 e6       	ldi	r30, 0x60	; 96
 222:	f6 e0       	ldi	r31, 0x06	; 6
 224:	81 83       	std	Z+1, r24	; 0x01
 226:	08 95       	ret

00000228 <led_toggle>:
}

void led_toggle(void){
	PORT_TogglePins(&LED_PORT,LED_bm);
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	e0 e6       	ldi	r30, 0x60	; 96
 22c:	f6 e0       	ldi	r31, 0x06	; 6
 22e:	87 83       	std	Z+7, r24	; 0x07
 230:	08 95       	ret

00000232 <spi_init>:
	if(ucBitValue==1){
		reg_write(ucAddr,ucCurrentRegValue | ucBitMask);
		}else{
		reg_write(ucAddr,ucCurrentRegValue & (~ucBitMask));
	}
}
 232:	af 92       	push	r10
 234:	cf 92       	push	r12
 236:	ef 92       	push	r14
 238:	0f 93       	push	r16
 23a:	e0 e4       	ldi	r30, 0x40	; 64
 23c:	f6 e0       	ldi	r31, 0x06	; 6
 23e:	82 e1       	ldi	r24, 0x12	; 18
 240:	81 83       	std	Z+1, r24	; 0x01
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	85 83       	std	Z+5, r24	; 0x05
 246:	a1 2c       	mov	r10, r1
 248:	c1 2c       	mov	r12, r1
 24a:	e1 2c       	mov	r14, r1
 24c:	00 e0       	ldi	r16, 0x00	; 0
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	40 e4       	ldi	r20, 0x40	; 64
 252:	56 e0       	ldi	r21, 0x06	; 6
 254:	60 ec       	ldi	r22, 0xC0	; 192
 256:	78 e0       	ldi	r23, 0x08	; 8
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e2       	ldi	r25, 0x20	; 32
 25c:	7d d0       	rcall	.+250    	; 0x358 <SPI_MasterInit>
 25e:	0f 91       	pop	r16
 260:	ef 90       	pop	r14
 262:	cf 90       	pop	r12
 264:	af 90       	pop	r10
 266:	08 95       	ret

00000268 <reg_write>:
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	06 2f       	mov	r16, r22
 272:	c0 e4       	ldi	r28, 0x40	; 64
 274:	d6 e0       	ldi	r29, 0x06	; 6
 276:	12 e0       	ldi	r17, 0x02	; 2
 278:	1e 83       	std	Y+6, r17	; 0x06
 27a:	68 2f       	mov	r22, r24
 27c:	60 62       	ori	r22, 0x20	; 32
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e2       	ldi	r25, 0x20	; 32
 282:	97 d0       	rcall	.+302    	; 0x3b2 <SPI_MasterTransceiveByte>
 284:	60 2f       	mov	r22, r16
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e2       	ldi	r25, 0x20	; 32
 28a:	93 d0       	rcall	.+294    	; 0x3b2 <SPI_MasterTransceiveByte>
 28c:	1d 83       	std	Y+5, r17	; 0x05
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <payload_write>:
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	f8 2e       	mov	r15, r24
 2a4:	19 2f       	mov	r17, r25
 2a6:	06 2f       	mov	r16, r22
 2a8:	22 e0       	ldi	r18, 0x02	; 2
 2aa:	e0 e4       	ldi	r30, 0x40	; 64
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	26 83       	std	Z+6, r18	; 0x06
 2b0:	60 ea       	ldi	r22, 0xA0	; 160
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e2       	ldi	r25, 0x20	; 32
 2b6:	7d d0       	rcall	.+250    	; 0x3b2 <SPI_MasterTransceiveByte>
 2b8:	00 23       	and	r16, r16
 2ba:	51 f0       	breq	.+20     	; 0x2d0 <payload_write+0x38>
 2bc:	cf 2d       	mov	r28, r15
 2be:	d1 2f       	mov	r29, r17
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	69 91       	ld	r22, Y+
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e2       	ldi	r25, 0x20	; 32
 2c8:	74 d0       	rcall	.+232    	; 0x3b2 <SPI_MasterTransceiveByte>
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	10 13       	cpse	r17, r16
 2ce:	f9 cf       	rjmp	.-14     	; 0x2c2 <payload_write+0x2a>
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	e0 e4       	ldi	r30, 0x40	; 64
 2d4:	f6 e0       	ldi	r31, 0x06	; 6
 2d6:	85 83       	std	Z+5, r24	; 0x05
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	08 95       	ret

000002e4 <rf_init_as_tx>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	8b e7       	ldi	r24, 0x7B	; 123
 2e6:	95 e1       	ldi	r25, 0x15	; 21
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <rf_init_as_tx+0x4>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <rf_init_as_tx+0xa>
 2ee:	00 00       	nop

void rf_init_as_tx(void){
	delay_us(11000);
	
	spi_init();
 2f0:	a0 df       	rcall	.-192    	; 0x232 <spi_init>
	PORT_SetPinsAsOutput( &RF_PORT,RF_CE_bm);
 2f2:	e0 e4       	ldi	r30, 0x40	; 64
 2f4:	f6 e0       	ldi	r31, 0x06	; 6
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	81 83       	std	Z+1, r24	; 0x01

void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
	}else{
		PORT_ClearPins( &RF_PORT,RF_CE_bm);
 2fa:	86 83       	std	Z+6, r24	; 0x06
	spi_init();
	PORT_SetPinsAsOutput( &RF_PORT,RF_CE_bm);
	
	set_CE(0);

	reg_write(CONFIG,(1<<PWR_UP)|(1<<EN_CRC)|(0<<MASK_TX_DS));
 2fc:	6a e0       	ldi	r22, 0x0A	; 10
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	b3 df       	rcall	.-154    	; 0x268 <reg_write>
	reg_write(EN_AA,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	b0 df       	rcall	.-160    	; 0x268 <reg_write>
	reg_write(RF_SETUP,(1<<RF_DR)); //2Mbps
 308:	68 e0       	ldi	r22, 0x08	; 8
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	ad df       	rcall	.-166    	; 0x268 <reg_write>
	reg_write(RF_CH, 12);
 30e:	6c e0       	ldi	r22, 0x0C	; 12
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	aa df       	rcall	.-172    	; 0x268 <reg_write>
 314:	87 ee       	ldi	r24, 0xE7	; 231
 316:	93 e0       	ldi	r25, 0x03	; 3
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <rf_init_as_tx+0x34>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <rf_init_as_tx+0x3a>
 31e:	00 00       	nop
 320:	08 95       	ret

00000322 <rf_clear_int_flags>:
	
	delay_us(2000);
}

void rf_clear_int_flags(){
	reg_write(STATUS_,0xff);
 322:	6f ef       	ldi	r22, 0xFF	; 255
 324:	87 e0       	ldi	r24, 0x07	; 7
 326:	a0 cf       	rjmp	.-192    	; 0x268 <reg_write>
 328:	08 95       	ret

0000032a <rf_send_byte>:
}


void rf_send_byte(unsigned char ucByteToSend){
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	1f 92       	push	r1
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	89 83       	std	Y+1, r24	; 0x01
	payload_write(&ucByteToSend, 1);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	ad df       	rcall	.-166    	; 0x298 <payload_write>
	}
};

void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	e0 e4       	ldi	r30, 0x40	; 64
 342:	f6 e0       	ldi	r31, 0x06	; 6
 344:	85 83       	std	Z+5, r24	; 0x05
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	8a 95       	dec	r24
 34a:	f1 f7       	brne	.-4      	; 0x348 <rf_send_byte+0x1e>
	}else{
		PORT_ClearPins( &RF_PORT,RF_CE_bm);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	86 83       	std	Z+6, r24	; 0x06
void rf_send_byte(unsigned char ucByteToSend){
	payload_write(&ucByteToSend, 1);
	set_CE(1);
	delay_us(15);
	set_CE(0);
}
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 358:	af 92       	push	r10
 35a:	cf 92       	push	r12
 35c:	ef 92       	push	r14
 35e:	0f 93       	push	r16
 360:	fc 01       	movw	r30, r24
 362:	60 83       	st	Z, r22
 364:	71 83       	std	Z+1, r23	; 0x01
 366:	42 83       	std	Z+2, r20	; 0x02
 368:	53 83       	std	Z+3, r21	; 0x03
 36a:	14 82       	std	Z+4, r1	; 0x04
 36c:	cc 20       	and	r12, r12
 36e:	11 f0       	breq	.+4      	; 0x374 <SPI_MasterInit+0x1c>
 370:	80 e8       	ldi	r24, 0x80	; 128
 372:	01 c0       	rjmp	.+2      	; 0x376 <SPI_MasterInit+0x1e>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	9a 2d       	mov	r25, r10
 378:	90 64       	ori	r25, 0x40	; 64
 37a:	a9 2e       	mov	r10, r25
 37c:	a8 2a       	or	r10, r24
 37e:	22 23       	and	r18, r18
 380:	11 f0       	breq	.+4      	; 0x386 <SPI_MasterInit+0x2e>
 382:	80 e2       	ldi	r24, 0x20	; 32
 384:	01 c0       	rjmp	.+2      	; 0x388 <SPI_MasterInit+0x30>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	00 61       	ori	r16, 0x10	; 16
 38a:	a8 2a       	or	r10, r24
 38c:	0a 29       	or	r16, r10
 38e:	db 01       	movw	r26, r22
 390:	0c 93       	st	X, r16
 392:	a0 81       	ld	r26, Z
 394:	b1 81       	ldd	r27, Z+1	; 0x01
 396:	11 96       	adiw	r26, 0x01	; 1
 398:	ec 92       	st	X, r14
 39a:	15 82       	std	Z+5, r1	; 0x05
 39c:	16 82       	std	Z+6, r1	; 0x06
 39e:	02 80       	ldd	r0, Z+2	; 0x02
 3a0:	f3 81       	ldd	r31, Z+3	; 0x03
 3a2:	e0 2d       	mov	r30, r0
 3a4:	80 ea       	ldi	r24, 0xA0	; 160
 3a6:	81 83       	std	Z+1, r24	; 0x01
 3a8:	0f 91       	pop	r16
 3aa:	ef 90       	pop	r14
 3ac:	cf 90       	pop	r12
 3ae:	af 90       	pop	r10
 3b0:	08 95       	ret

000003b2 <SPI_MasterTransceiveByte>:
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
	/* Send pattern. */
	spi->module->DATA = TXdata;
 3b2:	dc 01       	movw	r26, r24
 3b4:	ed 91       	ld	r30, X+
 3b6:	fc 91       	ld	r31, X
 3b8:	11 97       	sbiw	r26, 0x01	; 1
 3ba:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {}
 3bc:	ed 91       	ld	r30, X+
 3be:	fc 91       	ld	r31, X
 3c0:	82 81       	ldd	r24, Z+2	; 0x02
 3c2:	88 23       	and	r24, r24
 3c4:	ec f7       	brge	.-6      	; 0x3c0 <SPI_MasterTransceiveByte+0xe>
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 3c6:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
 3c8:	08 95       	ret

000003ca <__vector_2>:
#define BOOT_BUTT_bm		3
#define TRANSCIEVER_INT_PIN	2

unsigned char ucMessage = 0;

ISR(PORTC_INT0_vect){ // interrupt service routine 
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
	rf_clear_int_flags();
 3ec:	9a df       	rcall	.-204    	; 0x322 <rf_clear_int_flags>
	led_toggle();
 3ee:	1c df       	rcall	.-456    	; 0x228 <led_toggle>
	rf_send_byte(ucMessage++);
 3f0:	80 91 00 20 	lds	r24, 0x2000
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	98 0f       	add	r25, r24
 3f8:	90 93 00 20 	sts	0x2000, r25
 3fc:	96 df       	rcall	.-212    	; 0x32a <rf_send_byte>
};
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <main>:

int main (void){
	led_init();
 420:	fe de       	rcall	.-516    	; 0x21e <led_init>

	PORTC.DIRCLR = (1<<TRANSCIEVER_INT_PIN);  //set as input pin
 422:	e0 e4       	ldi	r30, 0x40	; 64
 424:	f6 e0       	ldi	r31, 0x06	; 6
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN2CTRL=  PORT_ISC_FALLING_gc;
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.INT0MASK=(1<<TRANSCIEVER_INT_PIN); 
 42e:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL= PORT_INT0LVL_LO_gc; 
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	81 87       	std	Z+9, r24	; 0x09
	PMIC.CTRL=PMIC_LOLVLEN_bm;	
 434:	e0 ea       	ldi	r30, 0xA0	; 160
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	82 83       	std	Z+2, r24	; 0x02
	sei(); // global interrupts enabling
 43a:	78 94       	sei

	rf_init_as_tx();
 43c:	53 df       	rcall	.-346    	; 0x2e4 <rf_init_as_tx>
	rf_clear_int_flags();
 43e:	71 df       	rcall	.-286    	; 0x322 <rf_clear_int_flags>
	rf_send_byte(ucMessage++);
 440:	80 91 00 20 	lds	r24, 0x2000
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	98 0f       	add	r25, r24
 448:	90 93 00 20 	sts	0x2000, r25
 44c:	6e df       	rcall	.-292    	; 0x32a <rf_send_byte>
 44e:	ff cf       	rjmp	.-2      	; 0x44e <main+0x2e>

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
